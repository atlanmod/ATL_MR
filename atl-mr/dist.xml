<?eclipse.ant.import ?>
<project name="atl-mr-dist" default="dist" xmlns:rsel="antlib:org.apache.tools.ant.types.resources.selectors" xmlns:ivy="antlib:org.apache.ivy.ant">

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${basedir}/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<property name="bin" location="bin" />
	<property name="dist" location="dist" />
	<property name="dist.libs" location="${dist}/libs" />
	<property name="dist.libs.ivy" location="${dist.libs}/ivy" />
	<property name="dist.libs.plugins" location="${dist.libs}/plugins" />
	<property name="dist.libs.atlmr" location="${dist.libs}/atlmr" />
	<property name="run.sh" value="${dist}/run.sh" />
	<property name="run.debug" value="${dist}/debug.sh" />
	<property name="main-class" value="fr.inria.atlanmod.atl_mr.hbase.ATLMRHBaseMaster" />
	<property name="jar.file" location="${dist}/${ant.project.name}.jar" />

	<target name="check.emftvm" unless="emftvm.exists">
		<available property="emftvm.exists" file="${dist.libs.atlmr}/plugins/org.eclipse.m2m.atl.emftvm_3.5.0.atlmr.jar" />
	</target>

	<target name="dist.emftvm" depends="check.emftvm" unless="${emftvm.exists}">
		<pde.exportPlugins useworkspacecompiledclasses="true" destination="${dist.libs.atlmr}" exportSource="false" exportType="directory" plugins="org.eclipse.m2m.atl.emftvm,org.eclipse.m2m.atl.emftvm.trace,fr.inria.atlanmod.neoemf.hbase,fr.inria.atlanmod.dag,fr.inria.atlanmod.dag.sort" useJARFormat="true" qualifier="atlmr" />
	</target>

	<target name="dist">
		<ivy:resolve refresh="true" showprogress="true" />
		<ivy:retrieve pattern="${dist.libs.ivy}/[conf]/[artifact]-[type]-[revision].[ext]" />

		<jar destfile="${jar.file}">
			<fileset dir="${bin}" includes="**/*.class" />
			<manifest>
				<attribute name="Main-Class" value="${main-class}" />
			</manifest>
		</jar>

		<restrict id="filtered.plugins">
			<path refid="Plug-in Dependencies.libraryclasspath" />
			<rsel:name name="*.jar" />
		</restrict>

		<copy todir="${dist.libs.plugins}" verbose="yes" flatten="yes" failonerror="no">
			<restrict>
				<restrict refid="filtered.plugins" />
			</restrict>
		</copy>

		<pathconvert property="libjars.plugins" pathsep="," dirsep="/">
			<map from="${dist.libs.plugins}" to="libs/plugins" />
			<fileset dir="${dist.libs.plugins}" />
		</pathconvert>

		<pathconvert property="libsjars.atlmr" pathsep="," dirsep="/">
			<map from="${dist.libs.atlmr}/plugins" to="libs/atlmr/plugins" />
			<fileset dir="${dist.libs.atlmr}/plugins" />
		</pathconvert>
		
		<pathconvert property="libsjars.hbase" pathsep="," dirsep="/">
			<map from="${dist.libs.ivy}/default" to="libs/ivy/default" />
			<fileset dir="${dist.libs.ivy}/default" excludes="*-javadoc*.jar,*-source*.jar,hadoop*.jar,hbase*.jar,zookeeper*.jar" />
		</pathconvert>
		
		<pathconvert property="classpath.plugins" pathsep=":" dirsep="/">
					<map from="${dist.libs.plugins}" to="libs/plugins" />
					<fileset dir="${dist.libs.plugins}" />
		</pathconvert>

		<pathconvert property="classpath.atlmr" pathsep=":" dirsep="/">
			<map from="${dist.libs.atlmr}/plugins" to="libs/atlmr/plugins" />
			<fileset dir="${dist.libs.atlmr}/plugins" />
		</pathconvert>
				
		<pathconvert property="classpath.hbase" pathsep=":" dirsep="/">
			<map from="${dist.libs.ivy}/default" to="libs/ivy/default" />
			<fileset dir="${dist.libs.ivy}/default" excludes="*-javadoc*.jar,*-source*.jar,hadoop*.jar,hbase*.jar,zookeeper*.jar" />
		</pathconvert>
		
		<antcall target="create.debug"/>
		<antcall target="create.sh" />
		<antcall target="copyToDocker"/>
	</target>

	<target name="clean-dist">
		<delete>
			<fileset dir="${dist}" includes="**/*" />
			<dirset dir="${dist}" includes="**/*" />
		</delete>
	</target>

	<target name="create.sh">
		<echo file="${run.sh}">#!/bin/bash

YARNARGS=$@

JARS=${classpath.plugins}}:${classpath.atlmr}:${classpath.hbase}
LIBJARS=${libjars.plugins},${libsjars.atlmr},${libsjars.hbase}


			while [[ $# > 1 ]]
			do
			key="$1"
			shift

			case $key in
			    -f | --file)
			    TRANSFORMATION="$1"
			    shift
			    ;;
			    -s | --source-metamodel)
			    SOURCEMM="$1"
			    shift
			    ;;
			    -t | --target-metamodel)
			    TARGETMM="$1"
			    shift
			    ;;
			    -i | --input)
			    INPUT="$1"
			    shift
			    ;;
			    -a | --additional-jars)
			    JARS=$JARS:$1
			    LIBJARS=$LIBJARS,${1/:/,}
			    echo $JARS
			    echo $LIBJARS		
			    shift
			    ;;		
			    *)

			;;
			esac
			done
			
RECORDS=records.rec

yarn jar ${ant.project.name}.jar -libjars "$LIBJARS" -files "$SOURCEMM#$SOURCEMM,$TARGETMM#$TARGETMM,$TRANSFORMATION#$TRANSFORMATION,$INPUT#$INPUT" $YARNARGS -r $URIRECORDS -m $MAPPERS
		</echo>
	</target>

	<target name="create.debug">
		<echo file="${run.debug}">#!/bin/bash

YARNARGS=$@

JARS=libs/atlmr/plugins/*:libs/plugins/*:libs/ivy/default/*
LIBJARS=${libjars.plugins},${libsjars.atlmr}


			while [[ $# > 1 ]]
			do
			key="$1"
			shift

			case $key in
			    -f | --file)
			    TRANSFORMATION="$1"
			    shift
			    ;;
			    -s | --source-metamodel)
			    SOURCEMM="$1"
			    shift
			    ;;
			    -t | --target-metamodel)
			    TARGETMM="$1"
			    shift
			    ;;
			    -i | --input)
			    INPUT="$1"
			    shift
			    ;;
			    -a | --additional-jars)
			    JARS=$JARS:$1
			    LIBJARS=$LIBJARS,${1/:/,}
			    echo $JARS
			    echo $LIBJARS		
			    shift
			    ;;		
			    *)

			;;
			esac
			done

yarn jar ${ant.project.name}.jar -libjars "$LIBJARS" -files "$SOURCEMM#$SOURCEMM,$TARGETMM#$TARGETMM,$TRANSFORMATION#$TRANSFORMATION,$INPUT#$INPUT" $YARNARGS -r $URIRECORDS -m $MAPPERS
		</echo>
	</target>
	<target name="copyToDocker">
		 <exec executable="/bin/bash">
		    <arg value="./copy.sh"/>
		 </exec>
	</target>
</project>

